# -*- coding: utf-8-sig -*-
import pandas as pd 
import numpy as np 
import re
from difflib import SequenceMatcher


class ArabicIngredientsStemmer:


       
    stop_words=["،","اض","امينَ","اه","اهاً","اي","ا","اب","اجل","اجمع","اخ","اخذ","اصبح","اضحى","اقبل","اقل","اكثر","الا","ام","اما","امامك","امامكَ","امسى","امّا","ان","انا","انت","انتم","انتما","انتن","انتِ","انشا","انّى","او","اوشك","اولئك","اولئكم","اولاء","اولالك","اوّهْ","اي","ايا","اين","اينما","ايّ","اَنَّ","اََيُّ","اُفٍّ","اذ","اذا","اذاً","اذما","اذن","الى","اليكم","اليكما","اليكنّ","اليكَ","الَيْكَ","الّا","امّا","ان","انّما","اي","اياك","اياكم","اياكما","اياكن","ايانا","اياه","اياها","اياهم","اياهما","اياهن","اياي","ايهٍ","اِنَّ","ا","ابتدا","اثر","اجل","احد","اخرى","اخلولق","اذا","اربعة","ارتدّ","استحال","اطار","اعادة","اعلنت","اف","اكثر","اكد","الالاء","الالى","الا","الاخيرة","الان","الاول","الاولى","التى","التي","الثاني","الثانية","الذاتي","الذى","الذي","الذين","السابق","الف","اللائي","اللاتي","اللتان","اللتيا","اللتين","اللذان","اللذين","اللواتي","الماضي","المقبل","الوقت","الى","اليوم","اما","امام","امس","ان","انبرى","انقلب","انه","انها","او","اول","اي","ايار","ايام","ايضا","ب","بات","باسم","بان","بخٍ","برس","بسبب","بسّ","بشكل","بضع","بطان","بعد","بعض","بك","بكم","بكما","بكن","بل","بلى","بما","بماذا","بمن","بن","بنا","به","بها","بي","بيد","بين","بَسْ","بَلْهَ","بِئْسَ","تانِ","تانِك","تبدّل","تجاه","تحوّل","تلقاء","تلك","تلكم","تلكما","تم","تينك","تَيْنِ","تِه","تِي","ثلاثة","ثم","ثمّ","ثمّة","ثُمَّ","جعل","جلل","جميع","جير","حار","حاشا","حاليا","حاي","حتى","حرى","حسب","حم","حوالى","حول","حيث","حيثما","حين","حيَّ","حَبَّذَا","حَتَّى","حَذارِ","خلا","خلال","دون","دونك","ذا","ذات","ذاك","ذانك","ذانِ","ذلك","ذلكم","ذلكما","ذلكن","ذو","ذوا","ذواتا","ذواتي","ذيت","ذينك","ذَيْنِ","ذِه","ذِي","راح","رجع","رويدك","ريث","رُبَّ","زيارة","سبحان","سرعان","سنة","سنوات","سوف","سوى","سَاءَ","سَاءَمَا","شبه","شخصا","شرع","شَتَّانَ","صار","صباح","صفر","صهٍ","صهْ","ضد","ضمن","طاق","طالما","طفق","طَق","ظلّ","عاد","عام","عاما","عامة","عدا","عدة","عدد","عدم","عسى","عشر","عشرة","علق","على","عليك","عليه","عليها","علًّ","عن","عند","عندما","عوض","عين","عَدَسْ","عَمَّا","غدا","غير","ـ","ف","فان","فلان","فو","فى","في","فيم","فيما","فيه","فيها","قال","قام","قبل","قد","قطّ","قلما","قوة","كانّما","كاين","كايّ","كايّن","كاد","كان","كانت","كذا","كذلك","كرب","كل","كلا","كلاهما","كلتا","كلم","كليكما","كليهما","كلّما","كلَّا","كم","كما","كي","كيت","كيف","كيفما","كَاَنَّ","كِخ","لئن","لا","لات","لاسيما","لدن","لدى","لعمر","لقاء","لك","لكم","لكما","لكن","لكنَّما","لكي","لكيلا","للامم","لم","لما","لمّا","لن","لنا","له","لها","لو","لوكالة","لولا","لوما","لي","لَسْتَ","لَسْتُ","لَسْتُم","لَسْتُمَا","لَسْتُنَّ","لَسْتِ","لَسْنَ","لَعَلَّ","لَكِنَّ","لَيْتَ","لَيْسَ","لَيْسَا","لَيْسَتَا","لَيْسَتْ","لَيْسُوا","لَِسْنَا","ما","ماانفك","مابرح","مادام","ماذا","مازال","مافتئ","مايو","متى","مثل","مذ","مساء","مع","معاذ","مقابل","مكانكم","مكانكما","مكانكنّ","مكانَك","مليار","مليون","مما","ممن","من","منذ","منها","مه","مهما","مَنْ","مِن","نحن","نحو","نعم","نفس","نفسه","نهاية","نَخْ","نِعِمّا","نِعْمَ","ها","هاؤم","هاكَ","هاهنا","هبّ","هذا","هذه","هكذا","هل","هلمَّ","هلّا","هم","هما","هن","هنا","هناك","هنالك","هو","هي","هيا","هيت","هيّا","هَؤلاء","هَاتانِ","هَاتَيْنِ","هَاتِه","هَاتِي","هَجْ","هَذا","هَذانِ","هَذَيْنِ","هَذِه","هَذِي","هَيْهَاتَ","و","و6","وا","واحد","واضاف","واضافت","واكد","وان","واهاً","واوضح","وراءَك","وفي","وقال","وقالت","وقد","وقف","وكان","وكانت","ولا","ولم","ومن","وهو","وهي","ويكانّ","وَيْ","وُشْكَانََ","يكون","يمكن","يوم","ّايّان"]

    pattern = re.compile('[\u0627-\u064a]')

    
    def __init__(self, prices):
        self.ItemCorpus = []
        self.ItemCorpusDict = []
        self.extractNamesPrices(prices)
 
    #http://languagelog.ldc.upenn.edu/myl/ldc/morph/buckwalter.html
    def cleanArabicString(self, inp):
        # ، بال وبال ال
        out = " ".join(re.findall(r'[\u0621-\u0652]+', inp))
        out = out.replace(u'،',' ')
        out = out.replace(u'ء',' ')

        out = out.replace(' \u0628 ',' ')#/ و /
        
        out = out.replace('\u0622','\u0627')#آ
        out = out.replace('\u0623','\u0627')#أ
        out = out.replace('\u0625','\u0627')#إ
    
        out = out.replace('\u0629','\u0647')#ة
        out = out.replace('\u0649','\u064A')#ي

        out = out.replace(' \u0628 ',' ')#/ و /
        out = out.replace(' \u0627\u0628 ',' ')#/ او /
        out = out.replace(u'ال',' ')
        out = out.replace(u'لل',' ')
        out = out.replace('\u0624','')#ؤ
        out = out.replace('\u0648',' ')#و
        #out = out.replace('\u0628','')#ب
        out = out.replace('\u0647','')#ه
        return out
    
    
    def extractNamesPrices(self, prices): 
        """ extract names from prices and store in shared ItemCorpus """

        for item in prices:
            itemTxt = self.cleanArabicString(item)

            for comp in itemTxt.split():
                if self.pattern.match(comp) != None and len(comp)>2:
                    self.ItemCorpus.append(comp)
                    self.ItemCorpusDict.append({"word":comp,"id":item})
            del itemTxt  
        self.ItemCorpus = (set(self.ItemCorpus))

        return self.ItemCorpus 
    


    def extractNamesIngredients(self, recipes):
        """ extract names from ingredients and return it as a list of words """
        ingrdsCorpus = []
        for ingrds in recipes["ingrd"]:
            for ingrd in ingrds:
                ingrdTxt = self.cleanArabicString(ingrd["n"])
                for comp in ingrdTxt.split():
                    if self.pattern.match(comp) != None and len(comp)>2 and comp not in self.stop_words:
                        ingrdsCorpus.append(comp)
                del ingrdTxt 
        ingrdsCorpus = (set(ingrdsCorpus))
        return ingrdsCorpus
    
    def search(self, word):
        result = []
        for p in self.ItemCorpusDict:
            if p['word'] == word:
                result.append(p["id"])
        return result
    
    def machIngredItmPrice(self, ingrdsCorpus):
        """ mach Ingredients with Item price """

        names = []
        found = []
        for i in ingrdsCorpus:
            if not i in self.ItemCorpus:
                names.append(i) 
            else:
                found.append(i)

    
        names=list(set(names))

        for word in names:
            for item in self.ItemCorpus:
                if SequenceMatcher(None, word, item).ratio()>0.9:
                    found.append(item)
                break
        Items=[]
        for word in set(names+found):
            f=self.search(word)
            if(len(f)>0):
                Items= Items + self.search(word)
       
       
        return list(set(Items))